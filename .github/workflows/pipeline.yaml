name: Upgrade helm chart

env:
  GCR: gcr.io/root-anvil-365716/test-images
  PROJECT_ID: root-anvil-365716
  
  
on:
  workflow_dispatch:
jobs:
  Update:
    runs-on: ubuntu-latest
    container: ogechibogu/docker-helm:stable
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: configure git
        env:
          GIT_KEY: ${{ secrets.PAT }}
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global credential.helper store
          echo "https://${GITHUB_ACTOR}:${GIT_KEY}@github.com" >> ${HOME}/.git-credentials
      
      - name: install dependencies
        env:
          GCLOUD_KEY: ${{ secrets.GCLOUD_ACCESS_KEY }} 
        run: |
          helm plugin install https://github.com/hayorov/helm-gcs.git --version 0.4.0
          helm plugin update gcs
          cp -rf /root/.config ${HOME}/.config
          echo $GCLOUD_KEY > ${HOME}/.config/gcloud/application_default_credentials.json
          gcloud auth activate-service-account --key-file ${HOME}/.config/gcloud/application_default_credentials.json
          gcloud config set core/project  $PROJECT_ID --quiet
          helm repo add gcs-repo gs://chart-museum-007/charts
          gcloud auth configure-docker --quiet
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://gcr.io
         
      - name: check for updates
        run: |
          CHARTS=$(ls -d */ | sed 's|/||')
          for C in $CHARTS;do
            echo "checking $C for updates" 
            VENDOR_REPO_NAME=$(yq -e .repo.name ${C}/mirror.yaml)
            VENDOR_REPO=$(yq -e .repo.repository ${C}/mirror.yaml)
            helm repo add ${VENDOR_REPO_NAME} ${VENDOR_REPO}
            CHART_VERSION=$(yq -e .version ${C}/mirror.yaml)
            VENDOR_VERSION=$(helm search repo ${VENDOR_REPO_NAME}/${C} -o yaml | yq -r '.[].version')
            
            if [ $CHART_VERSION == $VENDOR_VERSION ];then
              echo " $C chart is up to date" 
            else
              echo " updating $C from version $CHART_VERSION to version $VENDOR_VERSION"
              if [ -d "temp" ]; then
                echo "Deleting existing temp folder..."
                rm -rf temp
              fi
              mkdir temp && cd temp
              helm pull ${VENDOR_REPO_NAME}/${C} --untar
              
              if [ -f "../$C/modify.sh" ]; then
                echo "Running modify.sh..."
              fi
              
              DOCKER_IMAGES=$(helm template $C |grep image: | sed 's/image://' | sed 's/^[[:space:]]*//')
              docker pull $DOCKER_IMAGES
              IMAGE_NAME=$(echo $DOCKER_IMAGES | sed 's|docker.io/||' | awk -F: '{print $1}')
              TAG=$(echo $DOCKER_IMAGES | awk -F: '{print $2}')
              
              docker tag $IMAGE_NAME:$TAG $GCR/$IMAGE_NAME:$TAG
              docker push $GCR/$IMAGE_NAME:$TAG
              DIGEST=$(gcloud container images describe $GCR/$IMAGE_NAME:$TAG | yq -e .image_summary.digest -)
              
              echo "checking something"
              REPLACE_KEY=$(yq e -o=json $C/values.yaml | jq -r --arg TAG "$TAG" 'paths as $p | select(getpath($p) == $TAG) | $p | map(if type=="number" then "["+tostring+"]" else tostring end) | join(".")' | sed 's/.tag//g')
              echo $REPLACE_KEY
              
              
              yq e ".$REPLACE_KEY.digest = \"$DIGEST\"" -i $C/values.yaml
                
              docker image rm $IMAGE_NAME:$TAG
              docker image rm $GCR/$IMAGE_NAME:$TAG
            
              yq e ".global.imageRegistry = \"$GCR\"" -i $C/values.yaml
              
              helm template ${C} |grep image:
              helm package ${C}
              #helm gcs push temp/* ${VENDOR_REPO_NAME}
              #helm repo update 
              rm -rf ${C} && cd ..
              rm -rf temp
              
              yq e ".version = \"$VENDOR_VERSION\"" -i $C/mirror.yaml
              git add . && git commit -m "automatic upgrade of $C chart" && git push
              echo "$C updated successfully"
            fi
          done
          
          
     
    
